from elasticsearch_dsl import Q
from blog.documents import ArticleDocument

# in django shell
"""Сначала нам нужно получить экземпляр Search. Мы делаем это, вызывая search() в нашем документе следующим образом:
"""
search = ArticleDocument.search()

# Выполняет поиск всех статей, в названии которых есть «How to».
query = 'How to'
q = Q(
     'multi_match',
     query=query,
     fields=[
         'title'
     ])
search = ArticleDocument.search().query(q)
response = search.execute()

# распечатать все хиты
for hit in search:
    print(hit.title)

"""
Ищет все статьи, которые:
1) Содержите слово "language" в "title".
2) Не используйте "ruby" или "javascript" в "title".
3) И содержать запрос в "title" или "description".
"""
query = 'programming'
q = Q(
     'bool',
     must=[
         Q('match', title='language'),
     ],
     must_not=[
         Q('match', title='ruby'),
         Q('match', title='javascript'),
     ],
     should=[
         Q('match', title=query),
         Q('match', description=query),
     ],
     minimum_should_match=1)
search = ArticleDocument.search().query(q)
response = search.execute()

# распечатать все хиты
for hit in search:
    print(hit.title)

"""
Еще одна важная вещь при работе с запросами Elasticsearch - это нечеткость Fuzzy.
 Нечеткие запросы Fuzzy - это запросы, которые позволяют нам обрабатывать опечатки.
 Они используют алгоритм расстояния Левенштейна, который вычисляет расстояние между результатом в нашей базе данных и запросом.
"""

query = 'djengo'  # notice the typo
q = Q(
     'multi_match',
     query=query,
     fields=[
         'title'
     ])
search = ArticleDocument.search().query(q)
response = search.execute()

# print all the hits
for hit in search:
    print(hit.title)  # ничего не получим, потому что пользователь не правильно написал запрос


query = 'djengo'  # notice the typo
q = Q(
     'multi_match',
     query=query,
     fields=[
         'title'
     ],
     fuzziness='auto') # подключили нечеткость
search = ArticleDocument.search().query(q)
response = search.execute()

# print all the hits
for hit in search:
    print(hit.title) # получим ответ , потому что нечеткость обработана